{ 
  "swagger":"2.0",
  "info":{ 
    "description":"This is Katana Slice Manager Swagger for documenting Katana's NBI REST APIs. You can find more about Katana Slice Manager at [Katana Github page](https://github.com/medianetlab/katana-slice_manager).",
    "title":"Katana Swagger",
    "version":"1.0.0",
    "contact":{ 
      "email":"thmanagnostopoulos@iit.demokritos.gr"
    },
    "license":{ 
      "name":"Apache 2.0",
      "url":"http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host":"localhost:8000",
  "basePath":"/api",
  "tags":[ 
    { 
      "name":"Slice",
      "description":"Create, Read, Update and Delete Network Slices",
      "externalDocs":{ 
        "description":"Wiki",
        "url":"https://github.com/medianetlab/katana-slice_manager/wiki/user_guide"
      }
    },
    { 
      "name":"VIM",
      "description":"Add, Read, Update and Delete VIMs",
      "externalDocs":{ 
        "description":"Wiki",
        "url":"https://github.com/medianetlab/katana-slice_manager/wiki/sbi"
      }
    },
    { 
      "name":"NFVO",
      "description":"Add, Read, Update and Delete NFVOs",
      "externalDocs":{ 
        "description":"Wiki",
        "url":"https://github.com/medianetlab/katana-slice_manager/wiki/sbi"
      }
    },
    { 
      "name":"WIM",
      "description":"Add, Read, Update and Delete WIMs",
      "externalDocs":{ 
        "description":"Wiki",
        "url":"https://github.com/medianetlab/katana-slice_manager/wiki/sbi"
      }
    },
    { 
      "name":"EMS",
      "description":"Add, Read, Update and Delete EMSs",
      "externalDocs":{ 
        "description":"Wiki",
        "url":"https://github.com/medianetlab/katana-slice_manager/wiki/sbi"
      }
    },
    {
      "name": "PDU",
      "description": "Add, Read, Update and Delete EMSs",
      "externalDocs":{ 
        "description":"Wiki",
        "url":"https://github.com/medianetlab/katana-slice_manager/wiki/sbi"
      }
    },
    { 
      "name":"Resources",
      "description":"Read the available/max resources"
    },
    {
      "name": "Supported SST",
      "description": "Read, Write, Update and Delete the supported slices on the platform",
      "externalDocs":{ 
        "description":"Wiki",
        "url":"https://github.com/medianetlab/katana-slice_manager/wiki/sst"
      }
    }
  ],
  "schemes":[ 
    "http"
  ],
  "paths":{ 
    "/slice":{ 
      "get":{ 
        "tags":[ 
          "Slice"
        ],
        "summary":"Returns a list of created slices",
        "produces":[ 
          "application/json"
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation",
            "schema":{ 
              "type":"array",
              "items":{ 
                "$ref":"#/definitions/slice_ls"
              }
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      },
      "post":{ 
        "tags":[ 
          "Slice"
        ],
        "summary":"Creates a new slice",
        "consumes":[ 
          "application/json",
          "application/yaml"
        ],
        "produces":[ 
          "application/json"
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation",
            "schema":{ 
              "type":"string"
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "405":{ 
            "description":"Invalid Input"
          },
          "500":{ 
            "description":"Server Error"
          }
        },
        "parameters":[ 
          { 
            "in":"body",
            "name":"body",
            "description":"Slice Parameters",
            "required":true,
            "schema":{ 
              "type":"object",
              "properties":{ 
                "nsi":{ 
                  "$ref":"#/definitions/nsi"
                }
              }
            }
          }
        ]
      }
    },
    "/slice/{slice_id}":{ 
      "get":{ 
        "tags":[ 
          "Slice"
        ],
        "summary":"Returns information about the given slice",
        "produces":[ 
          "application/json"
        ],
        "parameters":[ 
          { 
            "name":"slice_id",
            "in":"path",
            "description":"ID of slice to be inspected",
            "required":true,
            "type":"string"
          }
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation",
            "schema":{ 
              "$ref":"#/definitions/slice_inspect"
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      },
      "delete":{ 
        "tags":[ 
          "Slice"
        ],
        "summary":"Deletes the given slice",
        "produces":[ 
          "application/json"
        ],
        "parameters":[ 
          { 
            "name":"slice_id",
            "in":"path",
            "description":"ID of slice to be deleted",
            "required":true,
            "type":"string"
          }
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation"
          },
          "400":{ 
            "description":"Bad Request"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      }
    },
    "/slice/{slice_id}/time":{ 
      "get":{ 
        "tags":[ 
          "Slice"
        ],
        "summary":"Returns information about the deployment time of the given slice",
        "produces":[ 
          "application/json"
        ],
        "parameters":[ 
          { 
            "name":"slice_id",
            "in":"path",
            "description":"ID of slice",
            "required":true,
            "type":"string"
          }
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation",
            "schema":{ 
              "$ref":"#/definitions/time"
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      }
    },
    "/vim":{ 
      "get":{ 
        "tags":[ 
          "VIM"
        ],
        "summary":"Returns a list of registered VIMs",
        "produces":[ 
          "application/json"
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation",
            "schema":{ 
              "type":"array",
              "items":{ 
                "$ref":"#/definitions/any_ls"
              }
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      },
      "post":{ 
        "tags":[ 
          "VIM"
        ],
        "summary":"Adds a new VIM",
        "consumes":[ 
          "application/json",
          "application/yaml"
        ],
        "produces":[ 
          "application/json"
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation",
            "schema":{ 
              "type":"string"
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "405":{ 
            "description":"Invalid Input"
          },
          "500":{ 
            "description":"Server Error"
          }
        },
        "parameters":[ 
          { 
            "in":"body",
            "name":"body",
            "description":"VIM Parameters",
            "required":true,
            "schema":{ 
              "$ref":"#/definitions/vim"
            }
          }
        ]
      }
    },
    "/vim/{vim_id}":{ 
      "get":{ 
        "tags":[ 
          "VIM"
        ],
        "summary":"Returns information about the given VIM",
        "produces":[ 
          "application/json"
        ],
        "parameters":[ 
          { 
            "name":"vim_id",
            "in":"path",
            "description":"ID of VIM to be inspected",
            "required":true,
            "type":"string"
          }
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation",
            "schema":{ 
              "$ref":"#/definitions/vim"
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      },
      "delete":{ 
        "tags":[ 
          "VIM"
        ],
        "summary":"Deletes the given VIM",
        "produces":[ 
          "application/json"
        ],
        "parameters":[ 
          { 
            "name":"vim_id",
            "in":"path",
            "description":"ID of VIM to be deleted",
            "required":true,
            "type":"string"
          }
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation"
          },
          "400":{ 
            "description":"Bad Request"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      }
    },
    "/nfvo":{ 
      "get":{ 
        "tags":[ 
          "NFVO"
        ],
        "summary":"Returns a list of registered NFVOs",
        "produces":[ 
          "application/json"
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation",
            "schema":{ 
              "type":"array",
              "items":{ 
                "$ref":"#/definitions/any_ls"
              }
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      },
      "post":{ 
        "tags":[ 
          "NFVO"
        ],
        "summary":"Adds a new NFVO",
        "consumes":[ 
          "application/json",
          "application/yaml"
        ],
        "produces":[ 
          "application/json"
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation",
            "schema":{ 
              "type":"string"
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "405":{ 
            "description":"Invalid Input"
          },
          "500":{ 
            "description":"Server Error"
          }
        },
        "parameters":[ 
          { 
            "in":"body",
            "name":"body",
            "description":"NFVO Parameters",
            "required":true,
            "schema":{ 
              "$ref":"#/definitions/nfvo"
            }
          }
        ]
      }
    },
    "/nfvo/{nfvo_id}":{ 
      "get":{ 
        "tags":[ 
          "NFVO"
        ],
        "summary":"Returns information about the given NFVO",
        "produces":[ 
          "application/json"
        ],
        "parameters":[ 
          { 
            "name":"nfvo_id",
            "in":"path",
            "description":"ID of NFVO to be inspected",
            "required":true,
            "type":"string"
          }
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation",
            "schema":{ 
              "$ref":"#/definitions/nfvo"
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      },
      "delete":{ 
        "tags":[ 
          "NFVO"
        ],
        "summary":"Deletes the given NFVO",
        "produces":[ 
          "application/json"
        ],
        "parameters":[ 
          { 
            "name":"nfvo_id",
            "in":"path",
            "description":"ID of NFVO to be deleted",
            "required":true,
            "type":"string"
          }
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation"
          },
          "400":{ 
            "description":"Bad Request"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      }
    },
    "/wim":{ 
      "get":{ 
        "tags":[ 
          "WIM"
        ],
        "summary":"Returns a list of registered WIMs",
        "produces":[ 
          "application/json"
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation",
            "schema":{ 
              "type":"array",
              "items":{ 
                "$ref":"#/definitions/any_ls"
              }
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      },
      "post":{ 
        "tags":[ 
          "WIM"
        ],
        "summary":"Adds a new WIM",
        "consumes":[ 
          "application/json",
          "application/yaml"
        ],
        "produces":[ 
          "application/json"
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation",
            "schema":{ 
              "type":"string"
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "405":{ 
            "description":"Invalid Input"
          },
          "500":{ 
            "description":"Server Error"
          }
        },
        "parameters":[ 
          { 
            "in":"body",
            "name":"body",
            "description":"WIM Parameters",
            "required":true,
            "schema":{ 
              "$ref":"#/definitions/wim"
            }
          }
        ]
      }
    },
    "/wim/{wim_id}":{ 
      "get":{ 
        "tags":[ 
          "WIM"
        ],
        "summary":"Returns information about the given WIM",
        "produces":[ 
          "application/json"
        ],
        "parameters":[ 
          { 
            "name":"wim_id",
            "in":"path",
            "description":"ID of WIM to be inspected",
            "required":true,
            "type":"string"
          }
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation",
            "schema":{ 
              "$ref":"#/definitions/wim"
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      },
      "delete":{ 
        "tags":[ 
          "WIM"
        ],
        "summary":"Deletes the given WIM",
        "produces":[ 
          "application/json"
        ],
        "parameters":[ 
          { 
            "name":"wim_id",
            "in":"path",
            "description":"ID of WIM to be deleted",
            "required":true,
            "type":"string"
          }
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation"
          },
          "400":{ 
            "description":"Bad Request"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      }
    },
    "/ems":{ 
      "get":{ 
        "tags":[ 
          "EMS"
        ],
        "summary":"Returns a list of registered EMSs",
        "produces":[ 
          "application/json"
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation",
            "schema":{ 
              "type":"array",
              "items":{ 
                "$ref":"#/definitions/any_ls"
              }
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      },
      "post":{ 
        "tags":[ 
          "EMS"
        ],
        "summary":"Adds a new EMS",
        "consumes":[ 
          "application/json",
          "application/yaml"
        ],
        "produces":[ 
          "application/json"
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation",
            "schema":{ 
              "type":"string"
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "405":{ 
            "description":"Invalid Input"
          },
          "500":{ 
            "description":"Server Error"
          }
        },
        "parameters":[ 
          { 
            "in":"body",
            "name":"body",
            "description":"EMS Parameters",
            "required":true,
            "schema":{ 
              "$ref":"#/definitions/ems"
            }
          }
        ]
      }
    },
    "/ems/{ems_id}":{ 
      "get":{ 
        "tags":[ 
          "EMS"
        ],
        "summary":"Returns information about the given EMS",
        "produces":[ 
          "application/json"
        ],
        "parameters":[ 
          { 
            "name":"ems_id",
            "in":"path",
            "description":"ID of EMS to be inspected",
            "required":true,
            "type":"string"
          }
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation",
            "schema":{ 
              "$ref":"#/definitions/ems"
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      },
      "delete":{ 
        "tags":[ 
          "EMS"
        ],
        "summary":"Deletes the given EMS",
        "produces":[ 
          "application/json"
        ],
        "parameters":[ 
          { 
            "name":"ems_id",
            "in":"path",
            "description":"ID of EMS to be deleted",
            "required":true,
            "type":"string"
          }
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation"
          },
          "400":{ 
            "description":"Bad Request"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      }
    },
    "/pdu": {
      "get":{ 
        "tags":[ 
          "PDU"
        ],
        "summary":"Returns a list of registered PDUs",
        "produces":[ 
          "application/json"
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation",
            "schema":{ 
              "type":"array",
              "items":{ 
                "$ref":"#/definitions/any_ls"
              }
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      },
      "post":{ 
        "tags":[ 
          "PDU"
        ],
        "summary":"Adds a new PDU",
        "consumes":[ 
          "application/json",
          "application/yaml"
        ],
        "produces":[ 
          "application/json"
        ],
        "responses":{ 
          "201":{ 
            "description":"Created"
          },
          "400":{ 
            "description":"Bad Request"
          },
          "405":{ 
            "description":"Invalid Input"
          },
          "500":{ 
            "description":"Server Error"
          }
        },
        "parameters":[ 
          { 
            "in":"body",
            "name":"body",
            "description":"EMS Parameters",
            "required":true,
            "schema":{ 
              "$ref":"#/definitions/pdu"
            }
          }
        ]
      }
    },
    "/pdu/{pdu_id}": {
      "get":{ 
        "tags":[ 
          "PDU"
        ],
        "summary":"Returns information about the given PDU",
        "produces":[ 
          "application/json"
        ],
        "parameters":[ 
          { 
            "name":"pdu_id",
            "in":"path",
            "description":"ID of PDU to be inspected",
            "required":true,
            "type":"string"
          }
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation",
            "schema":{ 
              "$ref":"#/definitions/pdu"
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "PDU"
        ],
        "summary": "Add or update a supported PDU on the platform",
        "produces":[ 
          "application/json"
        ],
        "responses":{
          "200":{ 
            "description":"Modified"
          }, 
          "201":{ 
            "description":"Created"
          },
          "400":{ 
            "description":"Bad Request"
          },
          "405":{ 
            "description":"Invalid Input"
          },
          "500":{ 
            "description":"Server Error"
          }
        },
        "parameters":[ 
          { 
            "in":"body",
            "name":"body",
            "description":"PDU Parameters",
            "required":true,
            "schema":{ 
              "$ref":"#/definitions/pdu"
            }
          },
          { 
            "name":"pdu_id",
            "in":"path",
            "description":"ID of PDU",
            "required":true,
            "type":"string"
          }
        ]
      },
      "delete":{ 
        "tags":[ 
          "PDU"
        ],
        "summary":"Deletes the given PDU",
        "produces":[ 
          "application/json"
        ],
        "parameters":[ 
          { 
            "name":"pdu_id",
            "in":"path",
            "description":"ID of PDU to be deleted",
            "required":true,
            "type":"string"
          }
        ],
        "responses":{ 
          "200":{ 
            "description":"Deleted"
          },
          "400":{ 
            "description":"Bad Request"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      }
    },
    "/resources":{ 
      "get":{ 
        "tags":[ 
          "Resources"
        ],
        "summary":"Returns information about the platform resources",
        "produces":[ 
          "application/json"
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation",
            "schema":{ 
              "$ref":"#/definitions/resources"
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      }
    },
    "/sst": {
      "get": {
        "tags": [
          "Supported SST"
        ],
        "summary": "Returns a list of the supported SST on the platform",
        "produces": [
          "application/json"
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation",
            "schema":{
              "type": "array",
              "description": "A list of supported sst",
              "items": {
                "$ref":"#/definitions/sup_sst"
              }
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Supported SST"
        ],
        "summary": "Add a supported SST on the platform",
        "produces":[ 
          "application/json"
        ],
        "responses":{ 
          "201":{ 
            "description":"Created"
          },
          "400":{ 
            "description":"Bad Request"
          },
          "405":{ 
            "description":"Invalid Input"
          },
          "500":{ 
            "description":"Server Error"
          }
        },
        "parameters":[ 
          { 
            "in":"body",
            "name":"body",
            "description":"EMS Parameters",
            "required":true,
            "schema":{ 
              "$ref":"#/definitions/sup_sst"
            }
          }
        ]
      }
    },
    "/sst/{sst_id}": {
      "get": {
        "tags": [
          "Supported SST"
        ],
        "summary": "Return Info about a specific supported SST on the platform",
        "produces":[ 
          "application/json"
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation",
            "schema":{ 
              "$ref":"#/definitions/resources"
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "500":{ 
            "description":"Server Error"
          }
        },
        "parameters":[ 
          { 
            "name":"sst_id",
            "in":"path",
            "description":"ID of SST",
            "required":true,
            "type":"string"
          }
        ]
      },
      "put": {
        "tags": [
          "Supported SST"
        ],
        "summary": "Add or update a supported SST on the platform",
        "produces":[ 
          "application/json"
        ],
        "responses":{
          "200":{ 
            "description":"Modified"
          }, 
          "201":{ 
            "description":"Created"
          },
          "400":{ 
            "description":"Bad Request"
          },
          "405":{ 
            "description":"Invalid Input"
          },
          "500":{ 
            "description":"Server Error"
          }
        },
        "parameters":[ 
          { 
            "in":"body",
            "name":"body",
            "description":"SST Parameters",
            "required":true,
            "schema":{ 
              "$ref":"#/definitions/sup_sst"
            }
          },
          { 
            "name":"sst_id",
            "in":"path",
            "description":"ID of SST",
            "required":true,
            "type":"string"
          }
        ]
      },
      "delete": {
        "tags": [
          "Supported SST"
        ],
        "summary": "Delete a supported SST on the platform",
        "produces":[ 
          "application/json"
        ],
        "responses":{
          "200":{ 
            "description":"Deleted"
          },
          "400":{ 
            "description":"Bad Request"
          },
          "405":{ 
            "description":"Invalid Input"
          },
          "500":{ 
            "description":"Server Error"
          }
        },
        "parameters":[
          { 
            "name":"sst_id",
            "in":"path",
            "description":"ID of SST",
            "required":true,
            "type":"string"
          }
        ]
      }
    }
  },
  "definitions":{ 
    "nsi":{ 
      "type":"object",
      "properties":{ 
        "id":{ 
          "type":"string"
        },
        "name":{ 
          "type":"string"
        },
        "short-name":{ 
          "type":"string"
        },
        "description":{ 
          "type":"string"
        },
        "type":{ 
          "type":"string"
        },
        "nsd-ref":{ 
          "type":"array",
          "items":{ 
            "type":"object",
            "properties":{ 
              "id":{ 
                "type":"string"
              },
              "name":{ 
                "type":"string"
              },
              "short-name":{ 
                "type":"string"
              },
              "radio":{ 
                "type":"boolean"
              }
            }
          }
        },
        "wim-ref":{ 
          "type":"object",
          "properties":{ 
            "endpoint-segment":{ 
              "type":"array",
              "items":{ 
                "type":"object",
                "properties":{ 
                  "endpoint_id":{ 
                    "type":"string"
                  },
                  "endpoint_name":{ 
                    "type":"string"
                  },
                  "endpoint_ip":{ 
                    "type":"string"
                  }
                }
              }
            },
            "topology":{ 
              "type":"string"
            },
            "bidirectional":{ 
              "type":"boolean"
            },
            "link_params":{ 
              "type":"object",
              "properties":{ 
                "bw":{ 
                  "type":"integer"
                },
                "latency":{ 
                  "type":"integer"
                }
              }
            }
          }
        },
        "radio-ref":{ 
          "type":"object",
          "properties":{ 
            "location":{ 
              "type":"string"
            }
          }
        }
      }
    },
    "any_ls":{ 
      "type":"object",
      "properties":{ 
        "_id":{ 
          "type":"string"
        },
        "created at":{ 
          "type":"string",
          "format":"date-time"
        },
        "type":{ 
          "type":"string"
        }
      }
    },
    "slice_ls":{ 
      "type":"object",
      "properties":{ 
        "_id":{ 
          "type":"string"
        },
        "created at":{ 
          "type":"string",
          "format":"date-time"
        },
        "type":{ 
          "type":"string"
        }
      }
    },
    "time":{ 
      "type":"object",
      "properties":{ 
        "NS_Deployment_Time":{ 
          "type":"object",
          "properties":{ 
            "NSi_name":{ 
              "type":"string"
            }
          }
        },
        "Placement_Time":{ 
          "type":"string"
        },
        "Provisioning_Time":{ 
          "type":"string"
        },
        "Radio_Configuration_Time":{ 
          "type":"string"
        },
        "Slice_Deployment_Time":{ 
          "type":"string"
        },
        "WAN_Deployment_Time":{ 
          "type":"string"
        }
      }
    },
    "slice_inspect":{ 
      "type":"object",
      "properties":{ 
        "nsi":{ 
          "$ref":"#/definitions/nsi"
        },
        "created_at":{ 
          "type":"string",
          "format":"date-time"
        },
        "nfvo_vim_id":{ 
          "type":"string"
        },
        "placement":{ 
          "type":"object",
          "properties":{ 
            "<NSi_name>":{ 
              "type":"object",
              "properties":{ 
                "requirements":{ 
                  "type":"object",
                  "properties":{ 
                    "memory-mb":{ 
                      "type":"number"
                    },
                    "storage-mb":{ 
                      "type":"number"
                    },
                    "vcpu-count":{ 
                      "type":"number"
                    }
                  }
                },
                "vim":{ 
                  "type":"string"
                },
                "vim_net":{ 
                  "type":"array",
                  "items":{ 
                    "type":"string"
                  }
                },
                "vnfr":{ 
                  "type":"object",
                  "properties":{ 
                    "<VNFi_name>":{ 
                      "type":"array",
                      "items":{ 
                        "type":"object",
                        "properties":{ 
                          "ip_list":{ 
                            "type":"array",
                            "items":{ 
                              "type":"string"
                            }
                          },
                          "mgmt_ip":{ 
                            "type":"string"
                          },
                          "vm_name":{ 
                            "type":"string"
                          }
                        }
                      }
                    }
                  }
                },
                "deployment_time":{ 
                  "$ref":"#/definitions/time"
                }
              }
            }
          }
        }
      }
    },
    "vim":{ 
      "type": "object",
      "description": "A new VIM",
      "properties": {
        "id":{
          "type": "string",
          "description": "Unique id"
        },
        "name": {
          "type": "string",
          "description": "The name for the new VIM"
        },
        "auth_url": {
          "type": "string",
          "description": "VIM's authentication URL - example: http://10.200.64.2:5000/v3/"
        },
        "username": {
          "type": "string",
          "description": "The admin username"
        },
        "password": {
          "type": "string",
          "description": "The admin password"
        },
        "admin_project_name": {
          "type": "string",
          "description": "The admin project"
        },
        "location": {
          "type": "string",
          "description": "VIM's location"
        },
        "type": {
          "type": "string",
          "description": "VIM's type"
        },
        "version": {
          "type": "string",
          "description": "The version of the VIM's OS"
        },
        "description": {
          "type": "string",
          "description": "A description for the VIM"
        },
        "config": {
            "type": "object",
            "description": "Unique parameters regarding the VIM operation - example: Security group"
        }
      }
    },
    "nfvo":{ 
      "type": "object",
      "description": "A new NFVO",
      "properties": {
        "id":{
          "type": "string",
          "description": "Unique id"
        },
        "name": {
          "type": "string",
          "description": "The name for the new NFVO"
        },
        "nfvoip": {
          "type": "string",
          "description": "NFVO's authentication URL - example: http://10.200.64.2:5000/v3/"
        },
        "nfvousername": {
          "type": "string",
          "description": "The admin username"
        },
        "nfvopassword": {
          "type": "string",
          "description": "The admin password"
        },
        "type": {
          "type": "string",
          "description": "NFVO's type"
        },
        "version": {
          "type": "string",
          "description": "The version of the NFVO's OS"
        },
        "description": {
          "type": "string",
          "description": "A description for the NFVO"
        },
        "config": {
            "type": "object",
            "description": "Optional parameters regarding the NFVO operation - example: network: flat"
        }
      }
    },
    "wim":{ 
      "type": "object",
      "description": "A new WIM",
      "properties": {
        "id":{
          "type": "string",
          "description": "Unique id"
        },
        "name": {
          "type": "string",
          "description": "The name for the new WIM"
        },
        "description": {
          "type": "string",
          "description": "A description for the WIM"
        },
        "url": {
          "type": "string",
          "description": "WIM's authentication URL - example: http://10.200.64.2:5000/"
        },
        "type": {
          "type": "string",
          "description": "WIM's type"
        }
      }
    },
    "ems":{ 
      "type": "object",
      "description": "A new EMS",
      "properties": {
        "id":{
          "type": "string",
          "description": "Unique id"
        },
        "name": {
          "type": "string",
          "description": "The name for the new EMS"
        },
        "description": {
          "type": "string",
          "description": "A description for the EMS"
        },
        "url": {
          "type": "string",
          "description": "EMS' authentication URL - example: http://10.200.64.2:5000/"
        },
        "type": {
          "type": "string",
          "description": "EMS' type"
        }
      }
    },
    "pdu": {
      "type": "object",
      "description": "A new PDU",
      "properties": {
        "id":{
          "type": "string",
          "description": "Unique id"
        },
        "name": {
          "type": "string",
          "description": "The name for the new PDU"
        },
        "ip": {
          "type": "string",
          "description": "The mgmt IP of the PDU"
        },
        "description": {
          "type": "string",
          "description": "A description for the PDU"
        },
        "location": {
          "type": "string",
          "description": "The location for new PDU"
        }
      }
    },
    "resources":{
      "type": "object",
      "properties": {
        "VIMs": {
          "type": "array",
          "description": "A list of all the available VIMs",
          "items":{
            "type": "object",
            "description": "A VIM",
            "properties": {
              "name": {"type": "string"},
              "type": {"type": "string"},
              "location": {"type": "string"},
              "max_resources":{
                "type": "object",
                "properties": {
                  "CPUs": {"type": "number"},
                  "RAM": {"type": "number"},
                  "Disk": {"type": "number"}
                }
              },
              "available_resources":{
                "type": "object",
                "properties": {
                  "CPUs": {"type": "number"},
                  "RAM": {"type": "number"},
                  "Disk": {"type": "number"}
                }
              }
            }
          }
        },
        "Radio-Elements": {
          "type": "array",
          "description": "A list of all the available radio elements",
          "items": {
            "type": "object",
            "description": "A radio element",
            "properties": {
              "name": {"type": "string"},
              "type": {"type": "string"},
              "location": {"type": "string"},
              "available": {"type": "boolean"}
            }
          }
        }
      }
    },
    "sup_sst": {
      "type": "object",
      "description": "A supported slice by the platform",
      "properties": {
        "sst": {
          "type": "number",
          "enum": [1, 2, 3],
          "description": "1: embb, 2: urllc, 3: iot"
        },
        "sd": {
          "type": "number",
          "description": "Service Differentiator - Optional information that complements the Slice/Service type(s) to differentiate amongst multiple Network Slices of the same SST"
        },
        "supported_locations": {
          "type": "array",
          "description" : "A list of the supported edge locations of the platform for that slice",
          "items": {
            "type": "string",
            "description": "A location"
          }
        },
        "ns_list": {
          "type": "array",
          "description": "A list of the NSs that will be part of the slice",
          "items": {
            "$ref": "#/definitions/ns"
          }
        },
        "pnf_list": {
          "type": "array",
          "description": "A list of the PNFs that will be part of the slice",
          "items": {
            "$ref": "#/definitions/pnf"
          }
        }
      }
    },
    "ns": {
      "type": "object",
      "description": "A Network Service",
      "properties":{
        "nfvo-id":{
          "type": "string",
          "description": "The NFVO that will manage the life cycle of the NS"
        },
        "nsd-id": {
          "type": "string",
          "description": "The NSD id as defined on the NFVO"
        },
        "placement": {
          "type": "number",
          "enum": [1, 2],
          "description": "1: Core, 2: Edge"
        },
        "optional":{
          "type": "boolean"
        }
      }
    },
    "pnf": {
      "type": "object",
      "description": "A Physical Network Service",
      "properties": {
        "ems-id": {
          "type": "string",
          "description": "The EMS that will manage the life cycle of the EMS"
        },
        "pdu-id": {
          "type": "string",
          "description": "The Physical Device Unit that will be used for the PNF"
        },
        "optional":{
          "type": "boolean"
        }
      }
    }
  }
}