{ 
  "swagger":"2.0",
  "info":{ 
    "description":"This is Katana Slice Manager Swagger for documenting Katana's NBI REST APIs. You can find more about Katana Slice Manager at [Katana Github page](https://github.com/medianetlab/katana-slice_manager).",
    "title":"Katana Swagger",
    "version":"1.0.0",
    "contact":{ 
      "email":"thmanagnostopoulos@iit.demokritos.gr"
    },
    "license":{ 
      "name":"Apache 2.0",
      "url":"http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host":"localhost:8000",
  "basePath":"/api",
  "tags":[ 
    { 
      "name":"Slice",
      "description":"Create, Read, Update and Delete Network Slices",
      "externalDocs":{ 
        "description":"Wiki",
        "url":"https://github.com/medianetlab/katana-slice_manager/wiki/user_guide"
      }
    },
    { 
      "name":"VIM",
      "description":"Add, Read, Update and Delete VIMs",
      "externalDocs":{ 
        "description":"Wiki",
        "url":"https://github.com/medianetlab/katana-slice_manager/wiki/sbi"
      }
    },
    { 
      "name":"NFVO",
      "description":"Add, Read, Update and Delete NFVOs",
      "externalDocs":{ 
        "description":"Wiki",
        "url":"https://github.com/medianetlab/katana-slice_manager/wiki/sbi"
      }
    },
    { 
      "name":"WIM",
      "description":"Add, Read, Update and Delete WIMs",
      "externalDocs":{ 
        "description":"Wiki",
        "url":"https://github.com/medianetlab/katana-slice_manager/wiki/sbi"
      }
    },
    { 
      "name":"EMS",
      "description":"Add, Read, Update and Delete EMSs",
      "externalDocs":{ 
        "description":"Wiki",
        "url":"https://github.com/medianetlab/katana-slice_manager/wiki/sbi"
      }
    },
    {
      "name": "PDU",
      "description": "Add, Read, Update and Delete EMSs",
      "externalDocs":{ 
        "description":"Wiki",
        "url":"https://github.com/medianetlab/katana-slice_manager/wiki/sbi"
      }
    },
    { 
      "name":"Resources",
      "description":"Read the available/max resources"
    },
    {
      "name":"Generic Slice Template",
      "description": "Read the GST given to the SM"
    },
    {
      "name":"Slice Descriptors",
      "description": "Create, Read, Update and Delete Slice Descriptors that will be included in the GST"
    },
    {
      "name": "Supported SST",
      "description": "Read, Write, Update and Delete the supported slices on the platform",
      "externalDocs":{ 
        "description":"Wiki",
        "url":"https://github.com/medianetlab/katana-slice_manager/wiki/sst"
      }
    }
  ],
  "schemes":[ 
    "http"
  ],
  "paths":{ 
    "/slice":{ 
      "get":{ 
        "tags":[ 
          "Slice"
        ],
        "summary":"Returns a list of created slices",
        "produces":[ 
          "application/json"
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation",
            "schema":{ 
              "type":"array",
              "items":{ 
                "$ref":"#/definitions/slice_ls"
              }
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      },
      "post":{ 
        "tags":[ 
          "Slice"
        ],
        "summary":"Creates a new slice",
        "consumes":[ 
          "application/json",
          "application/yaml"
        ],
        "produces":[ 
          "application/json"
        ],
        "responses":{ 
          "201":{ 
            "description":"Successful Operation",
            "schema":{ 
              "type":"string",
              "description": "The uuid of the new Slice"
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "405":{ 
            "description":"Invalid Input"
          },
          "500":{ 
            "description":"Server Error"
          }
        },
        "parameters":[ 
          { 
            "in":"body",
            "name":"body",
            "description":"Slice Parameters",
            "required":true,
            "schema":{ 
              "type":"object",
              "description": "The GST for the new slice",
              "properties":{ 
                "gst":{ 
                  "$ref":"#/definitions/gst"
                }
              }
            }
          }
        ]
      }
    },
    "/slice/{slice_id}":{ 
      "get":{ 
        "tags":[ 
          "Slice"
        ],
        "summary":"Returns information about the given slice",
        "produces":[ 
          "application/json"
        ],
        "parameters":[ 
          { 
            "name":"slice_id",
            "in":"path",
            "description":"ID of slice to be inspected",
            "required":true,
            "type":"string"
          }
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation",
            "schema":{ 
              "$ref":"#/definitions/slice_inspect"
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "404":{
            "description":"Not Found"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      },
      "delete":{ 
        "tags":[ 
          "Slice"
        ],
        "summary":"Deletes the given slice",
        "produces":[ 
          "application/json"
        ],
        "parameters":[ 
          { 
            "name":"slice_id",
            "in":"path",
            "description":"ID of slice to be deleted",
            "required":true,
            "type":"string"
          }
        ],
        "responses":{ 
          "200":{ 
            "description":"Deleting"
          },
          "400":{ 
            "description":"Bad Request"
          },
          "404":{
            "description":"Not Found"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      }
    },
    "/slice/{slice_id}/time":{ 
      "get":{ 
        "tags":[ 
          "Slice"
        ],
        "summary":"Returns information about the deployment time of the given slice",
        "produces":[ 
          "application/json"
        ],
        "parameters":[ 
          { 
            "name":"slice_id",
            "in":"path",
            "description":"ID of slice",
            "required":true,
            "type":"string"
          }
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation",
            "schema":{ 
              "$ref":"#/definitions/time"
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "404":{
            "description":"Not Found"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      }
    },
    "/vim":{ 
      "get":{ 
        "tags":[ 
          "VIM"
        ],
        "summary":"Returns a list of registered VIMs",
        "produces":[ 
          "application/json"
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation",
            "schema":{ 
              "type":"array",
              "items":{ 
                "$ref":"#/definitions/sbi_ls"
              }
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      },
      "post":{ 
        "tags":[ 
          "VIM"
        ],
        "summary":"Adds a new VIM",
        "consumes":[ 
          "application/json",
          "application/yaml"
        ],
        "produces":[ 
          "application/json"
        ],
        "responses":{ 
          "201":{ 
            "description":"Created",
            "schema":{ 
              "type":"string",
              "description": "The uuid of the new VIM"
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "405":{ 
            "description":"Invalid Input"
          },
          "500":{ 
            "description":"Server Error"
          }
        },
        "parameters":[ 
          { 
            "in":"body",
            "name":"body",
            "description":"VIM Parameters",
            "required":true,
            "schema":{ 
              "$ref":"#/definitions/vim"
            }
          }
        ]
      }
    },
    "/vim/{vim_id}":{ 
      "get":{ 
        "tags":[ 
          "VIM"
        ],
        "summary":"Returns information about the given VIM id",
        "produces":[ 
          "application/json"
        ],
        "parameters":[ 
          { 
            "name":"vim_id",
            "in":"path",
            "description":"ID of VIM to be inspected",
            "required":true,
            "type":"string"
          }
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation",
            "schema":{ 
              "$ref":"#/definitions/vim"
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "404":{
            "description":"Not Found"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      },
      "delete":{ 
        "tags":[ 
          "VIM"
        ],
        "summary":"Deletes the given VIM",
        "produces":[ 
          "application/json"
        ],
        "parameters":[ 
          { 
            "name":"vim_id",
            "in":"path",
            "description":"ID of VIM to be deleted",
            "required":true,
            "type":"string"
          }
        ],
        "responses":{ 
          "200":{ 
            "description":"Deleted"
          },
          "400":{ 
            "description":"Bad Request"
          },
          "404":{
            "description":"Not Found"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      },
      "put":{
        "tags":[ 
          "VIM"
        ],
        "summary":"Updates the given VIM",
        "produces":[ 
          "application/json"
        ],
        "parameters":[ 
          { 
            "name":"vim_id",
            "in":"path",
            "description":"ID of VIM to be updated",
            "required":true,
            "type":"string"
          },
          { 
            "in":"body",
            "name":"body",
            "description":"VIM Parameters",
            "required":true,
            "schema":{ 
              "$ref":"#/definitions/vim"
            }
          }
        ],
        "responses":{ 
          "200":{ 
            "description":"Updated"
          },
          "201":{ 
            "description":"Created",
            "schema":{ 
              "type":"string",
              "description": "The uuid of the new VIM"
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "404":{
            "description":"Not Found"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      }
    },
    "/nfvo":{ 
      "get":{ 
        "tags":[ 
          "NFVO"
        ],
        "summary":"Returns a list of registered NFVOs",
        "produces":[ 
          "application/json"
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation",
            "schema":{ 
              "type":"array",
              "items":{ 
                "$ref":"#/definitions/sbi_ls"
              }
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      },
      "post":{ 
        "tags":[ 
          "NFVO"
        ],
        "summary":"Adds a new NFVO",
        "consumes":[ 
          "application/json",
          "application/yaml"
        ],
        "produces":[ 
          "application/json"
        ],
        "responses":{ 
          "201":{ 
            "description":"Created",
            "schema":{ 
              "type":"string",
              "description": "The uuid of the new NFVO"
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "405":{ 
            "description":"Invalid Input"
          },
          "500":{ 
            "description":"Server Error"
          }
        },
        "parameters":[ 
          { 
            "in":"body",
            "name":"body",
            "description":"NFVO Parameters",
            "required":true,
            "schema":{ 
              "$ref":"#/definitions/nfvo"
            }
          }
        ]
      }
    },
    "/nfvo/{nfvo_id}":{ 
      "get":{ 
        "tags":[ 
          "NFVO"
        ],
        "summary":"Returns information about the given NFVO id",
        "produces":[ 
          "application/json"
        ],
        "parameters":[ 
          { 
            "name":"nfvo_id",
            "in":"path",
            "description":"ID of NFVO to be inspected",
            "required":true,
            "type":"string"
          }
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation",
            "schema":{ 
              "$ref":"#/definitions/nfvo"
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "404":{
            "description":"Not Found"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      },
      "delete":{ 
        "tags":[ 
          "NFVO"
        ],
        "summary":"Deletes the given NFVO",
        "produces":[ 
          "application/json"
        ],
        "parameters":[ 
          { 
            "name":"nfvo_id",
            "in":"path",
            "description":"ID of NFVO to be deleted",
            "required":true,
            "type":"string"
          }
        ],
        "responses":{ 
          "200":{ 
            "description":"Deleted"
          },
          "400":{ 
            "description":"Bad Request"
          },
          "404":{
            "description":"Not Found"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      },
      "put":{
        "tags":[ 
          "NFVO"
        ],
        "summary":"Updates the given NFVO",
        "produces":[ 
          "application/json"
        ],
        "parameters":[ 
          { 
            "name":"nfvo_id",
            "in":"path",
            "description":"ID of NFVO to be updated",
            "required":true,
            "type":"string"
          },
          { 
            "in":"body",
            "name":"body",
            "description":"NFVO Parameters",
            "required":true,
            "schema":{ 
              "$ref":"#/definitions/nfvo"
            }
          }
        ],
        "responses":{ 
          "200":{ 
            "description":"Updated"
          },
          "201":{ 
            "description":"Created",
            "schema":{ 
              "type":"string",
              "description": "The uuid of the new NFVO"
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "404":{
            "description":"Not Found"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      }
    },
    "/wim":{ 
      "get":{ 
        "tags":[ 
          "WIM"
        ],
        "summary":"Returns a list of registered WIMs",
        "produces":[ 
          "application/json"
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation",
            "schema":{ 
              "type":"array",
              "items":{ 
                "$ref":"#/definitions/sbi_ls"
              }
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      },
      "post":{ 
        "tags":[ 
          "WIM"
        ],
        "summary":"Adds a new WIM",
        "consumes":[ 
          "application/json",
          "application/yaml"
        ],
        "produces":[ 
          "application/json"
        ],
        "responses":{ 
          "201":{ 
            "description": "Created",
            "schema":{ 
              "type":"string",
              "description": "The uuid of the new WIM"
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "405":{ 
            "description":"Invalid Input"
          },
          "500":{ 
            "description":"Server Error"
          }
        },
        "parameters":[ 
          { 
            "in":"body",
            "name":"body",
            "description":"WIM Parameters",
            "required":true,
            "schema":{ 
              "$ref":"#/definitions/wim"
            }
          }
        ]
      }
    },
    "/wim/{wim_id}":{ 
      "get":{ 
        "tags":[ 
          "WIM"
        ],
        "summary":"Returns information about the given WIM",
        "produces":[ 
          "application/json"
        ],
        "parameters":[ 
          { 
            "name":"wim_id",
            "in":"path",
            "description":"ID of WIM to be inspected",
            "required":true,
            "type":"string"
          }
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation",
            "schema":{ 
              "$ref":"#/definitions/wim"
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "404":{
            "description":"Not Found"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      },
      "delete":{ 
        "tags":[ 
          "WIM"
        ],
        "summary":"Deletes the given WIM",
        "produces":[ 
          "application/json"
        ],
        "parameters":[ 
          { 
            "name":"wim_id",
            "in":"path",
            "description":"ID of WIM to be deleted",
            "required":true,
            "type":"string"
          }
        ],
        "responses":{ 
          "200":{ 
            "description":"Deleted"
          },
          "400":{ 
            "description":"Bad Request"
          },
          "404":{
            "description":"Not Found"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      },
      "put":{
        "tags":[ 
          "WIM"
        ],
        "summary":"Updates the given WIM",
        "produces":[ 
          "application/json"
        ],
        "parameters":[ 
          { 
            "name":"wim_id",
            "in":"path",
            "description":"ID of WIM to be updated",
            "required":true,
            "type":"string"
          },
          { 
            "in":"body",
            "name":"body",
            "description":"WIM Parameters",
            "required":true,
            "schema":{ 
              "$ref":"#/definitions/wim"
            }
          }
        ],
        "responses":{ 
          "200":{ 
            "description":"Updated"
          },
          "201":{ 
            "description":"Created",
            "schema":{ 
              "type":"string",
              "description": "The uuid of the new WIM"
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "404":{
            "description":"Not Found"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      }
    },
    "/ems":{ 
      "get":{ 
        "tags":[ 
          "EMS"
        ],
        "summary":"Returns a list of registered EMSs",
        "produces":[ 
          "application/json"
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation",
            "schema":{ 
              "type":"array",
              "items":{ 
                "$ref":"#/definitions/sbi_ls"
              }
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      },
      "post":{ 
        "tags":[ 
          "EMS"
        ],
        "summary":"Adds a new EMS",
        "consumes":[ 
          "application/json",
          "application/yaml"
        ],
        "produces":[ 
          "application/json"
        ],
        "responses":{ 
          "201":{ 
            "description":"Created",
            "schema":{ 
              "type":"string",
              "description": "The uuid of the new EMS"
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "405":{ 
            "description":"Invalid Input"
          },
          "500":{ 
            "description":"Server Error"
          }
        },
        "parameters":[ 
          { 
            "in":"body",
            "name":"body",
            "description":"EMS Parameters",
            "required":true,
            "schema":{ 
              "$ref":"#/definitions/ems"
            }
          }
        ]
      }
    },
    "/ems/{ems_id}":{ 
      "get":{ 
        "tags":[ 
          "EMS"
        ],
        "summary":"Returns information about the given EMS",
        "produces":[ 
          "application/json"
        ],
        "parameters":[ 
          { 
            "name":"ems_id",
            "in":"path",
            "description":"ID of EMS to be inspected",
            "required":true,
            "type":"string"
          }
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation",
            "schema":{ 
              "$ref":"#/definitions/ems"
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "404":{
            "description":"Not Found"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      },
      "delete":{ 
        "tags":[ 
          "EMS"
        ],
        "summary":"Deletes the given EMS",
        "produces":[ 
          "application/json"
        ],
        "parameters":[ 
          { 
            "name":"ems_id",
            "in":"path",
            "description":"ID of EMS to be deleted",
            "required":true,
            "type":"string"
          }
        ],
        "responses":{ 
          "200":{ 
            "description":"Deleted"
          },

          "400":{ 
            "description":"Bad Request"
          },
          "404":{
            "description":"Not Found"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      },
      "put":{
        "tags":[ 
          "EMS"
        ],
        "summary":"Updates the given EMS",
        "produces":[ 
          "application/json"
        ],
        "parameters":[ 
          { 
            "name":"ems_id",
            "in":"path",
            "description":"ID of EMS to be updated",
            "required":true,
            "type":"string"
          },
          { 
            "in":"body",
            "name":"body",
            "description":"EMS Parameters",
            "required":true,
            "schema":{ 
              "$ref":"#/definitions/ems"
            }
          }
        ],
        "responses":{ 
          "200":{ 
            "description":"Updated"
          },
          "201":{ 
            "description":"Created",
            "schema":{ 
              "type":"string",
              "description": "The uuid of the new EMS"
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "404":{
            "description":"Not Found"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      }
    },
    "/pdu": {
      "get":{ 
        "tags":[ 
          "PDU"
        ],
        "summary":"Returns a list of registered PDUs",
        "produces":[ 
          "application/json"
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation",
            "schema":{ 
              "type":"array",
              "items":{ 
                "$ref":"#/definitions/sbi_ls"
              }
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      },
      "post":{ 
        "tags":[ 
          "PDU"
        ],
        "summary":"Adds a new PDU",
        "consumes":[ 
          "application/json",
          "application/yaml"
        ],
        "produces":[ 
          "application/json"
        ],
        "responses":{ 
          "201":{ 
            "description":"Created",
            "schema":{ 
              "type":"string",
              "description": "The uuid of the new PDU"
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "405":{ 
            "description":"Invalid Input"
          },
          "500":{ 
            "description":"Server Error"
          }
        },
        "parameters":[ 
          { 
            "in":"body",
            "name":"body",
            "description":"PDU Parameters",
            "required":true,
            "schema":{ 
              "$ref":"#/definitions/pdu"
            }
          }
        ]
      }
    },
    "/pdu/{pdu_id}": {
      "get":{ 
        "tags":[ 
          "PDU"
        ],
        "summary":"Returns information about the given PDU",
        "produces":[ 
          "application/json"
        ],
        "parameters":[ 
          { 
            "name":"pdu_id",
            "in":"path",
            "description":"ID of PDU to be inspected",
            "required":true,
            "type":"string"
          }
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation",
            "schema":{ 
              "$ref":"#/definitions/pdu"
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "404":{
            "description":"Not Found"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "PDU"
        ],
        "summary": "Add or update a supported PDU on the platform",
        "produces":[ 
          "application/json"
        ],
        "responses":{
          "200":{ 
            "description":"Modified"
          }, 
          "201":{ 
            "description":"Created",
            "schema":{ 
              "type":"string",
              "description": "The uuid of the new PDU"
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "404":{
            "description":"Not Found"
          },
          "405":{ 
            "description":"Invalid Input"
          },
          "500":{ 
            "description":"Server Error"
          }
        },
        "parameters":[ 
          { 
            "in":"body",
            "name":"body",
            "description":"PDU Parameters",
            "required":true,
            "schema":{ 
              "$ref":"#/definitions/pdu"
            }
          },
          { 
            "name":"pdu_id",
            "in":"path",
            "description":"ID of PDU",
            "required":true,
            "type":"string"
          }
        ]
      },
      "delete":{ 
        "tags":[ 
          "PDU"
        ],
        "summary":"Deletes the given PDU",
        "produces":[ 
          "application/json"
        ],
        "parameters":[ 
          { 
            "name":"pdu_id",
            "in":"path",
            "description":"ID of PDU to be deleted",
            "required":true,
            "type":"string"
          }
        ],
        "responses":{ 
          "200":{ 
            "description":"Deleted"
          },
          "400":{ 
            "description":"Bad Request"
          },
          "404":{
            "description":"Not Found"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      }
    },
    "/resources":{ 
      "get":{ 
        "tags":[ 
          "Resources"
        ],
        "summary":"Returns information about the platform resources",
        "produces":[ 
          "application/json"
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation",
            "schema":{ 
              "$ref":"#/definitions/resources"
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      }
    },
    "/sst": {
      "get": {
        "tags": [
          "Supported SST"
        ],
        "summary": "Returns a list of the supported SST on the platform",
        "produces": [
          "application/json"
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation",
            "schema":{
              "type": "array",
              "description": "A list of supported sst",
              "items": {
                "$ref":"#/definitions/sup_sst"
              }
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "500":{ 
            "description":"Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Supported SST"
        ],
        "summary": "Add a supported SST on the platform",
        "produces":[ 
          "application/json"
        ],
        "responses":{ 
          "201":{ 
            "description":"Created",
            "schema":{ 
              "type":"string",
              "description": "The uuid of the new supported SST"
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "405":{ 
            "description":"Invalid Input"
          },
          "500":{ 
            "description":"Server Error"
          }
        },
        "parameters":[ 
          { 
            "in":"body",
            "name":"body",
            "description":"Supported SST Parameters",
            "required":true,
            "schema":{ 
              "$ref":"#/definitions/sup_sst"
            }
          }
        ]
      }
    },
    "/sst/{sst_id}": {
      "get": {
        "tags": [
          "Supported SST"
        ],
        "summary": "Return Info about a specific supported SST on the platform",
        "produces":[ 
          "application/json"
        ],
        "responses":{ 
          "200":{ 
            "description":"Successful Operation",
            "schema":{ 
              "$ref":"#/definitions/sup_sst"
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "404":{
            "description":"Not Found"
          },
          "500":{ 
            "description":"Server Error"
          }
        },
        "parameters":[ 
          { 
            "name":"sst_id",
            "in":"path",
            "description":"ID of SST",
            "required":true,
            "type":"string"
          }
        ]
      },
      "put": {
        "tags": [
          "Supported SST"
        ],
        "summary": "Add or update a supported SST on the platform",
        "produces":[ 
          "application/json"
        ],
        "responses":{
          "200":{ 
            "description":"Modified"
          }, 
          "201":{ 
            "description":"Created",
            "schema":{ 
              "type":"string",
              "description": "The uuid of the new supported SST"
            }
          },
          "400":{ 
            "description":"Bad Request"
          },
          "404":{
            "description":"Not Found"
          },
          "405":{ 
            "description":"Invalid Input"
          },
          "500":{ 
            "description":"Server Error"
          }
        },
        "parameters":[ 
          { 
            "in":"body",
            "name":"body",
            "description":"SST Parameters",
            "required":true,
            "schema":{ 
              "$ref":"#/definitions/sup_sst"
            }
          },
          { 
            "name":"sst_id",
            "in":"path",
            "description":"ID of SST",
            "required":true,
            "type":"string"
          }
        ]
      },
      "delete": {
        "tags": [
          "Supported SST"
        ],
        "summary": "Delete a supported SST on the platform",
        "produces":[ 
          "application/json"
        ],
        "responses":{
          "200":{ 
            "description":"Deleted"
          },
          "400":{ 
            "description":"Bad Request"
          },
          "404":{
            "description":"Not Found"
          },
          "405":{ 
            "description":"Invalid Input"
          },
          "500":{ 
            "description":"Server Error"
          }
        },
        "parameters":[
          { 
            "name":"sst_id",
            "in":"path",
            "description":"ID of SST",
            "required":true,
            "type":"string"
          }
        ]
      }
    }
  },
  "definitions":{ 
    "slice_descriptor":{
      "type": "object",
      "description": "This is the schema for the core part of the new slice",
      "properties": {
        "slice_des_id": {
          "type": "string",
          "description": "Id of the slice descriptor which will be used as base for the gst"
        },
        "slice_des_ref": {
          "type": "string",
          "description": "Reference to an added slice descriptor which will be used as base for the gst"
        },
        "coverage": {
          "type": "array",
          "description": "A list with all the locations that are part of the slice",
          "items":{
            "type": "string",
            "description": " The location name for each site in the slice"
          }
        },
        "delay_tolerance": {
          "type": "boolean",
          "description": "Supported or not supported"
        },
        "deterministic_communication":{
          "type": "object",
          "description": "This attribute defines if the network slice supports deterministic communication for periodic user traffic. Periodic traffic refers to the type of traffic with periodic transmissions.",
          "properties":{
            "availability": {
              "type": "boolean",
              "description": "This parameter describes if the network slice supports deterministic communication."
            },
            "periodicity": {
              "type": "array",
              "description": "This parameter provides a list of periodicities supported by the network slice.",
              "items": {
                "type": "number",
                "description": "Seconds"
              }
            }
          }
        },
        "network_DL_throughput": {
          "type": "object",
          "description": "The achievable data rate in downlink for the whole network slice (and not per user).",
          "properties": {
            "guaranteed": {
              "type": "number",
              "description": "kbps"
            },
            "maximum": {
              "type": "number",
              "description": "kbps"
            }
          }
        },
        "ue_DL_throughput": {
          "type": "object",
          "description": "This attribute describes the guaranteed data rate supported by the network slice per UE in downlink",
          "properties": {
            "guaranteed": {
              "type": "number",
              "description": "kbps"
            },
            "maximum": {
              "type": "number",
              "description": "kbps"
            }
          }
        },
        "network_UL_throughput": {
          "type": "object",
          "description": "The achievable data rate in uplink for the whole network slice (and not per user).",
          "properties": {
            "guaranteed": {
              "type": "number",
              "description": "kbps"
            },
            "maximum": {
              "type": "number",
              "description": "kbps"
            }
          }
        },
        "ue_UL_throughput": {
          "type": "object",
          "description": "This attribute describes the guaranteed data rate supported by the network slice per UE in uplink",
          "properties": {
            "guaranteed": {
              "type": "number",
              "description": "kbps"
            },
            "maximum": {
              "type": "number",
              "description": "kbps"
            }
          }
        },
        "group_communication_support": {
          "type": "number",
          "enum": [0, 1, 2, 3],
          "description": "0: not available 1: Single Cell Point to Multipoint (SCPTM) 2: Broadcast/Multicast 3: Broadcast/Multicast + SC-PTM"
        },
        "isolation_level": {
          "type": "object",
          "description": " A network slice instance may be fully or partly, logically and/or physically, isolated from another network slice instance",
          "properties": {
            "isolation": {
              "type": "number",
              "enum": [0, 1, 2, 3],
              "description": "0: No Isolation 1: Physical Isolation 2: Logical Isolation 3: Both Isolation"
            }
          }
        },
        "mtu": {
          "type": "number",
          "description": "Bytes"
        },
        "mission_critical_support": {
          "type": "object",
          "description": "Mission-critical (MC) leads to a priority of the network slice relative to others, for C-plane and U-plane decisions.",
          "properties": {
            "availability": {
              "type": "boolean"
            },
            "mc_service": {
              "type": "array",
              "description": "This attribute specifies whether or not the network slice supports MC push-to-talk, MC data, MC video, Isolated E-UTRAN Operation for Public Safety or MC interworking.",
              "items": {
                "type": "number",
                "enum": [1, 2, 3, 4, 5],
                "description": "1: MCPTT 2: MCData 3: MCVideo 4: IOPS 5: MC interworking"
              }
            }
          }
        },
        "mmtel_support": {
          "type": "boolean",
          "description": "This attribute describes whether the network slice supports IP Multimedia Subsystem (IMS) and Multimedia Telephony Service MMTel."
        },
        "nb_iot": {
          "type": "boolean",
          "description": "This parameter describes whether NB-IoT is supported in the network slice."
        },
        "number_of_connections": {
          "type": "number",
          "description": "This attribute describes the maximum number of concurrent sessions supported by the network slice."
        },
        "number_of_terminals": {
          "type": "number",
          "description": "This attribute describes the maximum number of concurrent terminals supported by the network slice."
        },
        "positional_support": {
          "type": "object",
          "description": "This attribute describes if the network slice provides geo-localization methods or supporting methods.",
          "properties": {
            "availability": {
              "type": "array",
              "description": "Describes if this attribute is provided by the network slice and contains a list of positioning methods provided by the slice.",
              "items": {
                "type": "number",
                "enum": [1, 2, 3, 4, 5, 6, 7],
                "description": "1: CID 2: E-CID (LTE and NR) 3: OTDOA (LTE and NR) 4: RF fingerprinting 5: AECID 6: Hybrid positioning 7: NET-RTK"
              }
            },
            "frequency": {
              "type": "number",
              "description": "Seconds"
            },
            "accuracy": {
              "type": "number",
              "description": "Meters"
            }
          }
        },
        "radio_spectrum": {
          "type": "array",
          "description": "Defines the radio spectrum supported by the network slice.",
          "items": {
            "type": "string",
            "description": "This attribute simply tells which frequencies can be used to access the network slice. Example: n1, n77, n38"
          }
        },
        "simultaneous_nsi": {
          "type": "number",
          "enum": [0, 1, 2, 3, 4, 5],
          "description": "0: Can be used with any network slice 1: Can be used with network slices with same SST value 2: Can be used with any network slice with same SD value 3: Cannot be used with another network slice 4-15: operator defined class"
        },
        "qos": {
          "type": "array",
          "description": "This attribute defines all the QoS relevant parameters supported by the network slice, based on 3GPP defined standard values (5QIs)",
          "items": {
            "type": "object",
            "description": "Refers to 5QI defined in https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=3144",
            "properties": {
              "qi": {
                "type": "number",
                "description": "Based on the table of defined 5QI by 3GPP"
              },
              "resource_type": {
                "type": "number",
                "enum": [0, 1, 2],
                "description": "0: GBR (Mission Critical Video user plane) 1: Delay critical GBR (Intelligent Transport Systems) 2: Non-GBR (Voice, AR)"
              },
              "priority_level": {
                "type": "number",
                "description": "Associated with 5G QoS characteristics indicates a priority in scheduling resources among QoS Flows."
              },
              "packet_delay_budget": {
                "type": "number",
                "description": "The Packet Delay Budget (PDB) defines an upper bound for the time that a packet may be delayed between the UE and the UPF [Seconds]."
              },
              "packet_error_rate": {
                "type": "number",
                "description": "The Packet Error Rate (PER) defines an upper bound for the rate of packets that are not successfully delivered by the corresponding receiver [percentage]."
              },
              "jitter": {
                "type": "number",
                "description": "Jitter is defined as a variation in the delay of received packets [Seconds]."
              },
              "max_packet_loss_rate": {
                "type": "number",
                "description": " the maximum rate for lost packets of the QoS flow that can be tolerated in the uplink (UL) and downlink (DL) direction [percentage."
              }
            }
          }
        },
        "nonIP_traffic": {
          "type": "boolean"
        },
        "device_velocity": {
          "type": "number",
          "enum": [1, 2, 3, 4],
          "description": "1: Stationary: 0 km/h 2: Pedestrian: 0 km/h to 10 km/h 3: Vehicular: 10 km/h to 120 km/h 4: High speed vehicular: 120 km/h to 500 km/h"
        },
        "terminal_density": {
          "type": "number",
          "description": "maximum number of connected and/or accessible devices per unit area (per km2) supported by the network slice [Number/km^2]"
        }
      }
    },
    "service_descriptor":{
      "type": "object",
      "description": "This is the schema for the Service Descriptor part of slice IM",
      "properties": {
        "ns_list": {
          "type": "array",
          "description": "List of the NSD to be instantiated alongside the slice",
          "items": {
            "type": "object",
            "description": "A NS",
            "properties":{
              "nfvo-id":{
                "type": "string",
                "description": "The NFVO that will manage the life cycle of the NS"
              },
              "nsd-id": {
                "type": "string",
                "description": "The NSD id as defined on the NFVO"
              },
              "ns-name": {
                "type": "string",
                "description": "The name of the NS"
              },
              "placement": {
                "type": "number",
                "enum": [0, 1],
                "description": "1: Core, 2: Edge"
              },
              "ems-id": {
                "type": "string",
                "description": "Optional - Defines the EMS that is responsible for D1&2 configuration"
              }
            }
          }
        }
      }
    },
    "test_descriptor":{
      "type": "object",
      "description": "This is the schema for the Test Descriptor part of slice IM",
      "properties": {
        "probe_list": {
          "type": "array",
          "description": "A list of probe ids to be included in the slice",
          "items": {
            "type": "string"
          }
        },
        "performance_monitoring": {
          "type": "object",
          "description": "This attribute provides the capability to monitor KQIs and KPIs.",
          "properties": {
            "availability": {
              "type": "array",
              "description": "List of KQIs and KPIs available for monitoring",
              "items": {
                "type": "number",
                "enum": [1, 2, 3],
                "description": "1: Throughput 2: Latency 3: Service Request Success Rate"
              }
            },
            "frequency": {
              "type": "number",
              "description": "Seconds"
            }
          }
        },
        "performance_prediction": {
          "type": "object",
          "description": "This attribute provides the capability to predict KQIs and KPIs.",
          "properties": {
            "availability": {
              "type": "array",
              "description": "List of KQIs and KPIs available for monitoring",
              "items": {
                "type": "number",
                "enum": [1, 2, 3],
                "description": "1: Throughput 2: Latency 3: Service Request Success Rate"
              }
            },
            "frequency": {
              "type": "number",
              "description": "Seconds"
            }
          }
        }
      }
    },
    "gst":{ 
      "type": "object",
      "properties": {
        "slice_descriptor": { "$ref": "#/definitions/slice_descriptor" },
        "service_descriptor": { "$ref": "#/definitions/service_descriptor" },
        "test_descriptor": { "$ref": "#/definitions/test_descriptor" }
      }
    },
    "sbi_ls":{ 
      "type":"object",
      "properties":{ 
        "_id":{ 
          "type":"string"
        },
        "created at":{ 
          "type":"string",
          "format":"date-time"
        },
        "type":{ 
          "type":"string"
        }
      }
    },
    "slice_ls":{ 
      "type":"object",
      "properties":{ 
        "_id":{ 
          "type":"string"
        },
        "created at":{ 
          "type":"string",
          "format":"date-time"
        },
        "type":{ 
          "type":"string"
        }
      }
    },
    "time":{ 
      "type":"object",
      "properties":{ 
        "NS_Deployment_Time":{ 
          "type":"object",
          "properties":{ 
            "NSi_name":{ 
              "type":"string"
            }
          }
        },
        "Placement_Time":{ 
          "type":"string"
        },
        "Provisioning_Time":{ 
          "type":"string"
        },
        "Radio_Configuration_Time":{ 
          "type":"string"
        },
        "Slice_Deployment_Time":{ 
          "type":"string"
        },
        "WAN_Deployment_Time":{ 
          "type":"string"
        }
      }
    },
    "slice_inspect":{ 
      "type":"object",
      "properties":{ 
        "nsi":{ 
          "$ref":"#/definitions/gst"
        },
        "created_at":{ 
          "type":"string",
          "format":"date-time"
        },
        "nfvo_vim_id":{ 
          "type":"string"
        },
        "placement":{ 
          "type":"object",
          "properties":{ 
            "<NSi_name>":{ 
              "type":"object",
              "properties":{ 
                "requirements":{ 
                  "type":"object",
                  "properties":{ 
                    "memory-mb":{ 
                      "type":"number"
                    },
                    "storage-mb":{ 
                      "type":"number"
                    },
                    "vcpu-count":{ 
                      "type":"number"
                    }
                  }
                },
                "vim":{ 
                  "type":"string"
                },
                "vim_net":{ 
                  "type":"array",
                  "items":{ 
                    "type":"string"
                  }
                },
                "vnfr":{ 
                  "type":"object",
                  "properties":{ 
                    "<VNFi_name>":{ 
                      "type":"array",
                      "items":{ 
                        "type":"object",
                        "properties":{ 
                          "ip_list":{ 
                            "type":"array",
                            "items":{ 
                              "type":"string"
                            }
                          },
                          "mgmt_ip":{ 
                            "type":"string"
                          },
                          "vm_name":{ 
                            "type":"string"
                          }
                        }
                      }
                    }
                  }
                },
                "deployment_time":{ 
                  "$ref":"#/definitions/time"
                }
              }
            }
          }
        }
      }
    },
    "vim":{ 
      "type": "object",
      "description": "A new VIM",
      "properties": {
        "id":{
          "type": "string",
          "description": "Unique id"
        },
        "name": {
          "type": "string",
          "description": "The name for the new VIM"
        },
        "auth_url": {
          "type": "string",
          "description": "VIM's authentication URL - example: http://10.200.64.2:5000/v3/"
        },
        "username": {
          "type": "string",
          "description": "The admin username"
        },
        "password": {
          "type": "string",
          "description": "The admin password"
        },
        "admin_project_name": {
          "type": "string",
          "description": "The admin project"
        },
        "location": {
          "type": "string",
          "description": "VIM's location"
        },
        "type": {
          "type": "string",
          "description": "VIM's type"
        },
        "version": {
          "type": "string",
          "description": "The version of the VIM's OS"
        },
        "description": {
          "type": "string",
          "description": "A description for the VIM"
        },
        "config": {
            "type": "object",
            "description": "Unique parameters regarding the VIM operation - example: Security group"
        }
      }
    },
    "nfvo":{ 
      "type": "object",
      "description": "A new NFVO",
      "properties": {
        "id":{
          "type": "string",
          "description": "Unique id"
        },
        "name": {
          "type": "string",
          "description": "The name for the new NFVO"
        },
        "nfvoip": {
          "type": "string",
          "description": "NFVO's authentication URL - example: http://10.200.64.2:5000/v3/"
        },
        "nfvousername": {
          "type": "string",
          "description": "The admin username"
        },
        "nfvopassword": {
          "type": "string",
          "description": "The admin password"
        },
        "type": {
          "type": "string",
          "description": "NFVO's type"
        },
        "version": {
          "type": "string",
          "description": "The version of the NFVO's OS"
        },
        "description": {
          "type": "string",
          "description": "A description for the NFVO"
        },
        "config": {
            "type": "object",
            "description": "Optional parameters regarding the NFVO operation - example: network: flat"
        }
      }
    },
    "wim":{ 
      "type": "object",
      "description": "A new WIM",
      "properties": {
        "id":{
          "type": "string",
          "description": "Unique id"
        },
        "name": {
          "type": "string",
          "description": "The name for the new WIM"
        },
        "description": {
          "type": "string",
          "description": "A description for the WIM"
        },
        "url": {
          "type": "string",
          "description": "WIM's authentication URL - example: http://10.200.64.2:5000/"
        },
        "type": {
          "type": "string",
          "description": "WIM's type"
        }
      }
    },
    "ems":{ 
      "type": "object",
      "description": "A new EMS",
      "properties": {
        "id":{
          "type": "string",
          "description": "Unique id"
        },
        "name": {
          "type": "string",
          "description": "The name for the new EMS"
        },
        "description": {
          "type": "string",
          "description": "A description for the EMS"
        },
        "url": {
          "type": "string",
          "description": "EMS' authentication URL - example: http://10.200.64.2:5000/"
        },
        "type": {
          "type": "string",
          "description": "EMS' type"
        }
      }
    },
    "pdu": {
      "type": "object",
      "description": "A new PDU",
      "properties": {
        "id":{
          "type": "string",
          "description": "Unique id"
        },
        "name": {
          "type": "string",
          "description": "The name for the new PDU"
        },
        "ip": {
          "type": "string",
          "description": "The mgmt IP of the PDU"
        },
        "description": {
          "type": "string",
          "description": "A description for the PDU"
        },
        "location": {
          "type": "string",
          "description": "The location for new PDU"
        }
      }
    },
    "resources":{
      "type": "object",
      "properties": {
        "VIMs": {
          "type": "array",
          "description": "A list of all the available VIMs",
          "items":{
            "type": "object",
            "description": "A VIM",
            "properties": {
              "name": {"type": "string"},
              "type": {"type": "string"},
              "location": {"type": "string"},
              "max_resources":{
                "type": "object",
                "properties": {
                  "CPUs": {"type": "number"},
                  "RAM": {"type": "number"},
                  "Disk": {"type": "number"}
                }
              },
              "available_resources":{
                "type": "object",
                "properties": {
                  "CPUs": {"type": "number"},
                  "RAM": {"type": "number"},
                  "Disk": {"type": "number"}
                }
              }
            }
          }
        },
        "Radio-Elements": {
          "type": "array",
          "description": "A list of all the available radio elements",
          "items": {
            "type": "object",
            "description": "A radio element",
            "properties": {
              "name": {"type": "string"},
              "type": {"type": "string"},
              "location": {"type": "string"},
              "available": {"type": "boolean"}
            }
          }
        }
      }
    },
    "sup_sst": {
      "type": "object",
      "description": "A supported slice by the platform",
      "properties": {
        "sst": {
          "type": "number",
          "enum": [1, 2, 3],
          "description": "1: embb, 2: urllc, 3: iot"
        },
        "sd": {
          "type": "number",
          "description": "Service Differentiator - Optional information that complements the Slice/Service type(s) to differentiate amongst multiple Network Slices of the same SST"
        },
        "supported_locations": {
          "type": "array",
          "description" : "A list of the supported edge locations of the platform for that slice",
          "items": {
            "type": "string",
            "description": "A location"
          }
        },
        "ns_list": {
          "type": "array",
          "description": "A list of the NSs that will be part of the slice",
          "items": {
            "$ref": "#/definitions/ns"
          }
        },
        "pnf_list": {
          "type": "array",
          "description": "A list of the PNFs that will be part of the slice",
          "items": {
            "$ref": "#/definitions/pnf"
          }
        }
      }
    },
    "ns": {
      "type": "object",
      "description": "A Network Service",
      "properties":{
        "nfvo-id":{
          "type": "string",
          "description": "The NFVO that will manage the life cycle of the NS"
        },
        "nsd-id": {
          "type": "string",
          "description": "The NSD id as defined on the NFVO"
        },
        "placement": {
          "type": "number",
          "enum": [1, 2],
          "description": "1: Core, 2: Edge"
        },
        "optional":{
          "type": "boolean"
        }
      }
    },
    "pnf": {
      "type": "object",
      "description": "A Physical Network Service",
      "properties": {
        "ems-id": {
          "type": "string",
          "description": "The EMS that will manage the life cycle of the EMS"
        },
        "pdu-id": {
          "type": "string",
          "description": "The Physical Device Unit that will be used for the PNF"
        },
        "optional":{
          "type": "boolean"
        }
      }
    }
  }
}